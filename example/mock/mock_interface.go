// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -source=interface.go -destination=./mock/mock_interface.go -package=mock_example
//
// Package mock_example is a generated GoMock package.
package mock_example

import (
	reflect "reflect"

	"github.com/google/go-cmp/cmp"
	example "github.com/trrrrrys/cmpmatcher/example"
	gomock "go.uber.org/mock/gomock"
)

// MockShop is a mock of Shop interface.
type MockShop struct {
	ctrl     *gomock.Controller
	recorder *MockShopMockRecorder
}

// MockShopMockRecorder is the mock recorder for MockShop.
type MockShopMockRecorder struct {
	mock *MockShop
}

// NewMockShop creates a new mock instance.
func NewMockShop(ctrl *gomock.Controller) *MockShop {
	mock := &MockShop{ctrl: ctrl}
	mock.recorder = &MockShopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShop) EXPECT() *MockShopMockRecorder {
	return m.recorder
}

// CreateItem mocks base method.
func (m *MockShop) CreateItem(id, name string, price int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateItem", id, name, price)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateItem indicates an expected call of CreateItem.
func (mr *MockShopMockRecorder) CreateItem(id, name, price any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateItem", reflect.TypeOf((*MockShop)(nil).CreateItem), CmpMatcher_7b2080d4019056bd2cfc34893357ba8e5812af03cf714c7d5c07371a955ff38c(id), CmpMatcher_7b2080d4019056bd2cfc34893357ba8e5812af03cf714c7d5c07371a955ff38c(name), CmpMatcher_7b2080d4019056bd2cfc34893357ba8e5812af03cf714c7d5c07371a955ff38c(price))
}

// DeleteItem mocks base method.
func (m *MockShop) DeleteItem(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteItem", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteItem indicates an expected call of DeleteItem.
func (mr *MockShopMockRecorder) DeleteItem(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteItem", reflect.TypeOf((*MockShop)(nil).DeleteItem), CmpMatcher_7b2080d4019056bd2cfc34893357ba8e5812af03cf714c7d5c07371a955ff38c(id))
}

// DeleteItems mocks base method.
func (m *MockShop) DeleteItems(ids ...string) error {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range ids {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteItems", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteItems indicates an expected call of DeleteItems.
func (mr *MockShopMockRecorder) DeleteItems(ids ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteItems", reflect.TypeOf((*MockShop)(nil).DeleteItems), CmpMatchers_7b2080d4019056bd2cfc34893357ba8e5812af03cf714c7d5c07371a955ff38c(ids)...)
}

// GetItem mocks base method.
func (m *MockShop) GetItem(id string) (example.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItem", id)
	ret0, _ := ret[0].(example.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItem indicates an expected call of GetItem.
func (mr *MockShopMockRecorder) GetItem(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItem", reflect.TypeOf((*MockShop)(nil).GetItem), CmpMatcher_7b2080d4019056bd2cfc34893357ba8e5812af03cf714c7d5c07371a955ff38c(id))
}

// GetItems mocks base method.
func (m *MockShop) GetItems() ([]example.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItems")
	ret0, _ := ret[0].([]example.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItems indicates an expected call of GetItems.
func (mr *MockShopMockRecorder) GetItems() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItems", reflect.TypeOf((*MockShop)(nil).GetItems))
}

// UpdateItem mocks base method.
func (m *MockShop) UpdateItem(id, name string, price int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateItem", id, name, price)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateItem indicates an expected call of UpdateItem.
func (mr *MockShopMockRecorder) UpdateItem(id, name, price any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateItem", reflect.TypeOf((*MockShop)(nil).UpdateItem), CmpMatcher_7b2080d4019056bd2cfc34893357ba8e5812af03cf714c7d5c07371a955ff38c(id), CmpMatcher_7b2080d4019056bd2cfc34893357ba8e5812af03cf714c7d5c07371a955ff38c(name), CmpMatcher_7b2080d4019056bd2cfc34893357ba8e5812af03cf714c7d5c07371a955ff38c(price))
}

type cmpMatcher_7b2080d4019056bd2cfc34893357ba8e5812af03cf714c7d5c07371a955ff38c struct {
	got  any
	want any
}

func (c *cmpMatcher_7b2080d4019056bd2cfc34893357ba8e5812af03cf714c7d5c07371a955ff38c) Matches(got interface{}) bool {
	return cmp.Equal(got, c.want)
}

func (c *cmpMatcher_7b2080d4019056bd2cfc34893357ba8e5812af03cf714c7d5c07371a955ff38c) Got(got any) string {
	c.got = got
	return "\033[2K\033[A"
}

func (c *cmpMatcher_7b2080d4019056bd2cfc34893357ba8e5812af03cf714c7d5c07371a955ff38c) String() string {
	return cmp.Diff(c.want, c.got)
}

func CmpMatcher_7b2080d4019056bd2cfc34893357ba8e5812af03cf714c7d5c07371a955ff38c(want any) gomock.Matcher {
	return &cmpMatcher_7b2080d4019056bd2cfc34893357ba8e5812af03cf714c7d5c07371a955ff38c{want: want}
}

func CmpMatchers_7b2080d4019056bd2cfc34893357ba8e5812af03cf714c7d5c07371a955ff38c(wants []any) []any {
	matchers := make([]any, 0, len(wants))
	for _, want := range wants {
		matchers = append(matchers, &cmpMatcher_7b2080d4019056bd2cfc34893357ba8e5812af03cf714c7d5c07371a955ff38c{want: want})
	}
	return matchers
}
